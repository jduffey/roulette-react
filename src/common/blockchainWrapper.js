import { ethers } from "ethers";

const provider = new ethers.providers.JsonRpcProvider("http://localhost:8545");

// TODO: retrieve addresses from file generated by initialization script so they aren't hardcoded
const FIRST_PLAYER_ADDRESS = process.env.REACT_APP_FIRST_PLAYER_ADDRESS || "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";
const SECOND_PLAYER_ADDRESS = process.env.REACT_APP_SECOND_PLAYER_ADDRESS || "0x70997970C51812dc3A010C7d01b50e0d17dc79C8";
const THIRD_PLAYER_ADDRESS = process.env.REACT_APP_THIRD_PLAYER_ADDRESS || "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC";
const HOUSE_ADDRESS = process.env.REACT_APP_HOUSE_ADDRESS || "0x90F79bf6EB2c4f870365E785982E1f101E93b906";
// Contract addresses are calculated from a hash of the deployer's address and nonce.
const TOKEN_CONTRACT_ADDRESS = process.env.REACT_APP_TOKEN_CONTRACT_ADDRESS || "0x057ef64E23666F000b34aE31332854aCBd1c8544";
const RANDOMNESS_PROVIDER_CONTRACT_ADDRESS = process.env.REACT_APP_RANDOMNESS_PROVIDER_CONTRACT_ADDRESS || "0x261D8c5e9742e6f7f1076Fa1F560894524e19cad";
const ROULETTE_CONTRACT_ADDRESS = process.env.REACT_APP_ROULETTE_CONTRACT_ADDRESS || "0xCE3478A9E0167a6Bc5716DC39DbbbfAc38F27623";

async function executeWager(address) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function executeWager(address)"],
        provider.getSigner(HOUSE_ADDRESS)
    );
    const tx = await contract.executeWager(
        address,
    );
    return tx;
}

async function placeBet(betName, betAmount) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function placeBet(string,uint256)"],
        provider.getSigner()
    );
    const tx = await contract.placeBet(betName, ethers.utils.parseEther(betAmount.toString()));
    return tx;
}

async function clearBets() {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function clearBets()"],
        provider.getSigner()
    );
    const tx = await contract.clearBets();
    return tx;
}

async function getPendingBets(address) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function getPendingBets(address) view returns (tuple(string betName, uint256 betAmount)[])"],
        provider.getSigner()
    );
    const bets = await contract.getPendingBets(address);
    return bets.map(bet => ({
        betName: bet.betName,
        betAmount: parseFloat(ethers.utils.formatEther(bet.betAmount))
    }));
}

async function getTotalPendingBetAmount(address) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function getTotalPendingBetAmount(address) view returns (uint256)"],
        provider.getSigner()
    );
    const amount = await contract.getTotalPendingBetAmount(address);
    return parseFloat(ethers.utils.formatEther(amount));
}

async function getEthBalance(address) {
    const signer = provider.getSigner(address);
    const balance = await signer.getBalance();
    return ethers.utils.formatEther(balance);
}

async function getBlock() {
    const block = await provider.getBlock("latest");
    return block;
}

async function getTokenBalance(address) {
    const token = new ethers.Contract(
        TOKEN_CONTRACT_ADDRESS,
        ["function balanceOf(address) view returns (uint)"],
        provider.getSigner(HOUSE_ADDRESS)
    );
    const balance = await token.balanceOf(address);
    return ethers.utils.formatEther(balance);
}

async function getPlayerAllowance(address) {
    const token = new ethers.Contract(
        TOKEN_CONTRACT_ADDRESS,
        ["function allowance(address, address) view returns (uint)"],
        provider.getSigner(HOUSE_ADDRESS)
    );
    const allowance = await token.allowance(address, ROULETTE_CONTRACT_ADDRESS);
    return ethers.utils.formatEther(allowance);
}

async function getPlayerNumberCompletionSetsCounter(address) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function getPlayerNumberCompletionSetsCounter(address) public view returns (uint256)"],
        provider.getSigner(address)
    );
    const count = await contract.getPlayerNumberCompletionSetsCounter(address);
    return count;
}

async function getPlayerNumberCompletionSetCurrent(address) {
    const contract = new ethers.Contract(
        ROULETTE_CONTRACT_ADDRESS,
        ["function getPlayerNumberCompletionSetCurrent(address) public view returns (uint256[])"],
        provider.getSigner(address)
    );
    const currentSet = await contract.getPlayerNumberCompletionSetCurrent(address);
    return currentSet.map((bigIntNumber) => parseInt(bigIntNumber.toString(), 10));;
}

let _cachedTokenSymbol = null;
async function getTokenSymbol() {
    if (_cachedTokenSymbol) return _cachedTokenSymbol;
    const token = new ethers.Contract(
        TOKEN_CONTRACT_ADDRESS,
        ["function symbol() view returns (string)"],
        provider
    );
    _cachedTokenSymbol = await token.symbol();
    return _cachedTokenSymbol;
}

const rouletteContractEvents = new ethers.Contract(
    ROULETTE_CONTRACT_ADDRESS,
    [
        'event ExecutedWager(address indexed, uint256)',
    ],
    provider
);

export {
    executeWager,
    placeBet,
    clearBets,
    getPendingBets,
    getTotalPendingBetAmount,
    getEthBalance,
    getBlock,
    getTokenBalance,
    getPlayerAllowance,
    getPlayerNumberCompletionSetsCounter,
    getPlayerNumberCompletionSetCurrent,
    FIRST_PLAYER_ADDRESS,
    SECOND_PLAYER_ADDRESS,
    THIRD_PLAYER_ADDRESS,
    HOUSE_ADDRESS,
    TOKEN_CONTRACT_ADDRESS,
    ROULETTE_CONTRACT_ADDRESS,
    RANDOMNESS_PROVIDER_CONTRACT_ADDRESS,
    getTokenSymbol,
    rouletteContractEvents,
};
